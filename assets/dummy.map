{"version":3,"sources":["vendor/ember-cli/app-prefix.js","dummy/app.js","dummy/components/app-version.js","dummy/components/svg-chart-base.js","dummy/components/svg-chart-column.js","dummy/components/svg-chart-grid.js","dummy/components/svg-chart-legend.js","dummy/components/svg-chart-line.js","dummy/components/svg-chart-rect.js","dummy/components/svg-chart-text.js","dummy/components/svg-chart-x-axis.js","dummy/components/svg-chart-y-axis.js","dummy/components/svg-chart.js","dummy/controllers/array.js","dummy/controllers/index.js","dummy/controllers/object.js","dummy/ember-svg-charts/tests/modules/ember-svg-charts/components/svg-chart-base.jshint.js","dummy/ember-svg-charts/tests/modules/ember-svg-charts/components/svg-chart-column.jshint.js","dummy/ember-svg-charts/tests/modules/ember-svg-charts/components/svg-chart-grid.jshint.js","dummy/ember-svg-charts/tests/modules/ember-svg-charts/components/svg-chart-legend.jshint.js","dummy/ember-svg-charts/tests/modules/ember-svg-charts/components/svg-chart-line.jshint.js","dummy/ember-svg-charts/tests/modules/ember-svg-charts/components/svg-chart-rect.jshint.js","dummy/ember-svg-charts/tests/modules/ember-svg-charts/components/svg-chart-text.jshint.js","dummy/ember-svg-charts/tests/modules/ember-svg-charts/components/svg-chart-x-axis.jshint.js","dummy/ember-svg-charts/tests/modules/ember-svg-charts/components/svg-chart-y-axis.jshint.js","dummy/ember-svg-charts/tests/modules/ember-svg-charts/components/svg-chart.jshint.js","dummy/initializers/app-version.js","dummy/initializers/export-application-global.js","dummy/router.js","dummy/templates/application.js","dummy/templates/index.js","dummy/tests/app.jshint.js","dummy/tests/controllers/index.jshint.js","dummy/tests/helpers/resolver.js","dummy/tests/helpers/resolver.jshint.js","dummy/tests/helpers/start-app.js","dummy/tests/helpers/start-app.jshint.js","dummy/tests/integration/components/svg-chart-bar-test.js","dummy/tests/integration/components/svg-chart-bar-test.jshint.js","dummy/tests/integration/components/svg-chart-base-test.js","dummy/tests/integration/components/svg-chart-base-test.jshint.js","dummy/tests/integration/components/svg-chart-column-test.js","dummy/tests/integration/components/svg-chart-column-test.jshint.js","dummy/tests/integration/components/svg-chart-grid-test.js","dummy/tests/integration/components/svg-chart-grid-test.jshint.js","dummy/tests/integration/components/svg-chart-legend-test.js","dummy/tests/integration/components/svg-chart-legend-test.jshint.js","dummy/tests/integration/components/svg-chart-line-test.js","dummy/tests/integration/components/svg-chart-line-test.jshint.js","dummy/tests/integration/components/svg-chart-test.js","dummy/tests/integration/components/svg-chart-test.jshint.js","dummy/tests/integration/components/svg-chart-text-test.js","dummy/tests/integration/components/svg-chart-text-test.jshint.js","dummy/tests/integration/components/svg-chart-x-axis-test.js","dummy/tests/integration/components/svg-chart-x-axis-test.jshint.js","dummy/tests/integration/components/svg-chart-y-axis-test.js","dummy/tests/integration/components/svg-chart-y-axis-test.jshint.js","dummy/tests/router.jshint.js","dummy/tests/test-helper.js","dummy/tests/test-helper.jshint.js","vendor/ember-cli/app-suffix.js","vendor/ember-cli/app-boot.js"],"sourcesContent":["\"use strict\";\n/* jshint ignore:start */\n\n/* jshint ignore:end */\n","define('dummy/app', ['exports', 'ember', 'ember/resolver', 'ember/load-initializers', 'dummy/config/environment'], function (exports, Ember, Resolver, loadInitializers, config) {\n\n  'use strict';\n\n  var App;\n\n  Ember['default'].MODEL_FACTORY_INJECTIONS = true;\n\n  App = Ember['default'].Application.extend({\n    modulePrefix: config['default'].modulePrefix,\n    podModulePrefix: config['default'].podModulePrefix,\n    Resolver: Resolver['default']\n  });\n\n  loadInitializers['default'](App, config['default'].modulePrefix);\n\n  exports['default'] = App;\n\n});","define('dummy/components/app-version', ['exports', 'ember-cli-app-version/components/app-version', 'dummy/config/environment'], function (exports, AppVersionComponent, config) {\n\n  'use strict';\n\n  var _config$APP = config['default'].APP;\n  var name = _config$APP.name;\n  var version = _config$APP.version;\n\n  exports['default'] = AppVersionComponent['default'].extend({\n    version: version,\n    name: name\n  });\n\n});","define('dummy/components/svg-chart-base', ['exports', 'ember-svg-charts/components/svg-chart-base'], function (exports, svg_chart_base) {\n\n\t'use strict';\n\n\n\n\texports['default'] = svg_chart_base['default'];\n\n});","define('dummy/components/svg-chart-column', ['exports', 'ember-svg-charts/components/svg-chart-column'], function (exports, svg_chart_column) {\n\n\t'use strict';\n\n\n\n\texports['default'] = svg_chart_column['default'];\n\n});","define('dummy/components/svg-chart-grid', ['exports', 'ember-svg-charts/components/svg-chart-grid'], function (exports, svg_chart_grid) {\n\n\t'use strict';\n\n\n\n\texports['default'] = svg_chart_grid['default'];\n\n});","define('dummy/components/svg-chart-legend', ['exports', 'ember-svg-charts/components/svg-chart-legend'], function (exports, svg_chart_legend) {\n\n\t'use strict';\n\n\n\n\texports['default'] = svg_chart_legend['default'];\n\n});","define('dummy/components/svg-chart-line', ['exports', 'ember-svg-charts/components/svg-chart-line'], function (exports, svg_chart_line) {\n\n\t'use strict';\n\n\n\n\texports['default'] = svg_chart_line['default'];\n\n});","define('dummy/components/svg-chart-rect', ['exports', 'ember-svg-charts/components/svg-chart-rect'], function (exports, svg_chart_rect) {\n\n\t'use strict';\n\n\n\n\texports['default'] = svg_chart_rect['default'];\n\n});","define('dummy/components/svg-chart-text', ['exports', 'ember-svg-charts/components/svg-chart-text'], function (exports, svg_chart_text) {\n\n\t'use strict';\n\n\n\n\texports['default'] = svg_chart_text['default'];\n\n});","define('dummy/components/svg-chart-x-axis', ['exports', 'ember-svg-charts/components/svg-chart-x-axis'], function (exports, svg_chart_x_axis) {\n\n\t'use strict';\n\n\n\n\texports['default'] = svg_chart_x_axis['default'];\n\n});","define('dummy/components/svg-chart-y-axis', ['exports', 'ember-svg-charts/components/svg-chart-y-axis'], function (exports, svg_chart_y_axis) {\n\n\t'use strict';\n\n\n\n\texports['default'] = svg_chart_y_axis['default'];\n\n});","define('dummy/components/svg-chart', ['exports', 'ember-svg-charts/components/svg-chart'], function (exports, svg_chart) {\n\n\t'use strict';\n\n\n\n\texports['default'] = svg_chart['default'];\n\n});","define('dummy/controllers/array', ['exports', 'ember'], function (exports, Ember) {\n\n\t'use strict';\n\n\texports['default'] = Ember['default'].Controller;\n\n});","define('dummy/controllers/index', ['exports', 'ember'], function (exports, Ember) {\n\n    'use strict';\n\n    exports['default'] = Ember['default'].Controller.extend({\n\n        actions: {\n\n            change: function change() {\n                var index = Ember['default'].$('#chartPicker')[0].selectedIndex;\n                var types = this.get('chartTypes');\n\n                this.set('chartType', types[index]);\n            }\n\n        },\n\n        chartType: 'column',\n\n        chartTypes: ['column', 'line'],\n\n        data: [{\n            title: 'set one',\n            data: [.30, .60, .40, .70, .10]\n        }, {\n            title: 'set 2',\n            data: [.20, .50, .20, .50, .20]\n        }, {\n            title: 'third set',\n            data: [.30, .40, .30, .40, .10]\n        }],\n\n        xAxisLabels: ['first', 'second', 'third', 'fourth', 'fifth'],\n\n        pieData: [{\n            title: 'one',\n            data: 13\n        }, {\n            title: 'two',\n            data: 3.2\n        }, {\n            title: 'three',\n            data: 5.5\n        }, {\n            title: 'four',\n            data: 10\n        }]\n\n    });\n\n});","define('dummy/controllers/object', ['exports', 'ember'], function (exports, Ember) {\n\n\t'use strict';\n\n\texports['default'] = Ember['default'].Controller;\n\n});","define('dummy/ember-svg-charts/tests/modules/ember-svg-charts/components/svg-chart-base.jshint', function () {\n\n  'use strict';\n\n  QUnit.module('JSHint - modules/ember-svg-charts/components');\n  QUnit.test('modules/ember-svg-charts/components/svg-chart-base.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'modules/ember-svg-charts/components/svg-chart-base.js should pass jshint.');\n  });\n\n});","define('dummy/ember-svg-charts/tests/modules/ember-svg-charts/components/svg-chart-column.jshint', function () {\n\n  'use strict';\n\n  QUnit.module('JSHint - modules/ember-svg-charts/components');\n  QUnit.test('modules/ember-svg-charts/components/svg-chart-column.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'modules/ember-svg-charts/components/svg-chart-column.js should pass jshint.');\n  });\n\n});","define('dummy/ember-svg-charts/tests/modules/ember-svg-charts/components/svg-chart-grid.jshint', function () {\n\n  'use strict';\n\n  QUnit.module('JSHint - modules/ember-svg-charts/components');\n  QUnit.test('modules/ember-svg-charts/components/svg-chart-grid.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'modules/ember-svg-charts/components/svg-chart-grid.js should pass jshint.\\nmodules/ember-svg-charts/components/svg-chart-grid.js: line 61, col 73, Missing semicolon.\\nmodules/ember-svg-charts/components/svg-chart-grid.js: line 88, col 72, Missing semicolon.\\n\\n2 errors');\n  });\n\n});","define('dummy/ember-svg-charts/tests/modules/ember-svg-charts/components/svg-chart-legend.jshint', function () {\n\n  'use strict';\n\n  QUnit.module('JSHint - modules/ember-svg-charts/components');\n  QUnit.test('modules/ember-svg-charts/components/svg-chart-legend.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'modules/ember-svg-charts/components/svg-chart-legend.js should pass jshint.');\n  });\n\n});","define('dummy/ember-svg-charts/tests/modules/ember-svg-charts/components/svg-chart-line.jshint', function () {\n\n  'use strict';\n\n  QUnit.module('JSHint - modules/ember-svg-charts/components');\n  QUnit.test('modules/ember-svg-charts/components/svg-chart-line.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'modules/ember-svg-charts/components/svg-chart-line.js should pass jshint.');\n  });\n\n});","define('dummy/ember-svg-charts/tests/modules/ember-svg-charts/components/svg-chart-rect.jshint', function () {\n\n  'use strict';\n\n  QUnit.module('JSHint - modules/ember-svg-charts/components');\n  QUnit.test('modules/ember-svg-charts/components/svg-chart-rect.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'modules/ember-svg-charts/components/svg-chart-rect.js should pass jshint.');\n  });\n\n});","define('dummy/ember-svg-charts/tests/modules/ember-svg-charts/components/svg-chart-text.jshint', function () {\n\n  'use strict';\n\n  QUnit.module('JSHint - modules/ember-svg-charts/components');\n  QUnit.test('modules/ember-svg-charts/components/svg-chart-text.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'modules/ember-svg-charts/components/svg-chart-text.js should pass jshint.');\n  });\n\n});","define('dummy/ember-svg-charts/tests/modules/ember-svg-charts/components/svg-chart-x-axis.jshint', function () {\n\n  'use strict';\n\n  QUnit.module('JSHint - modules/ember-svg-charts/components');\n  QUnit.test('modules/ember-svg-charts/components/svg-chart-x-axis.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'modules/ember-svg-charts/components/svg-chart-x-axis.js should pass jshint.\\nmodules/ember-svg-charts/components/svg-chart-x-axis.js: line 88, col 89, Missing semicolon.\\nmodules/ember-svg-charts/components/svg-chart-x-axis.js: line 84, col 19, \\'height\\' is defined but never used.\\n\\n2 errors');\n  });\n\n});","define('dummy/ember-svg-charts/tests/modules/ember-svg-charts/components/svg-chart-y-axis.jshint', function () {\n\n  'use strict';\n\n  QUnit.module('JSHint - modules/ember-svg-charts/components');\n  QUnit.test('modules/ember-svg-charts/components/svg-chart-y-axis.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'modules/ember-svg-charts/components/svg-chart-y-axis.js should pass jshint.\\nmodules/ember-svg-charts/components/svg-chart-y-axis.js: line 58, col 19, \\'x\\' is defined but never used.\\nmodules/ember-svg-charts/components/svg-chart-y-axis.js: line 90, col 89, Missing semicolon.\\n\\n2 errors');\n  });\n\n});","define('dummy/ember-svg-charts/tests/modules/ember-svg-charts/components/svg-chart.jshint', function () {\n\n  'use strict';\n\n  QUnit.module('JSHint - modules/ember-svg-charts/components');\n  QUnit.test('modules/ember-svg-charts/components/svg-chart.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'modules/ember-svg-charts/components/svg-chart.js should pass jshint.\\nmodules/ember-svg-charts/components/svg-chart.js: line 144, col 28, A leading decimal point can be confused with a dot: \\'.1\\'.\\nmodules/ember-svg-charts/components/svg-chart.js: line 250, col 33, Don\\'t make functions within a loop.\\nmodules/ember-svg-charts/components/svg-chart.js: line 332, col 23, \\'alter\\' is defined but never used.\\nmodules/ember-svg-charts/components/svg-chart.js: line 312, col 19, \\'explodeDistance\\' is defined but never used.\\nmodules/ember-svg-charts/components/svg-chart.js: line 319, col 19, \\'piOver180\\' is defined but never used.\\n\\n5 errors');\n  });\n\n});","define('dummy/initializers/app-version', ['exports', 'ember-cli-app-version/initializer-factory', 'dummy/config/environment'], function (exports, initializerFactory, config) {\n\n  'use strict';\n\n  var _config$APP = config['default'].APP;\n  var name = _config$APP.name;\n  var version = _config$APP.version;\n\n  exports['default'] = {\n    name: 'App Version',\n    initialize: initializerFactory['default'](name, version)\n  };\n\n});","define('dummy/initializers/export-application-global', ['exports', 'ember', 'dummy/config/environment'], function (exports, Ember, config) {\n\n  'use strict';\n\n  exports.initialize = initialize;\n\n  function initialize() {\n    var application = arguments[1] || arguments[0];\n    if (config['default'].exportApplicationGlobal !== false) {\n      var value = config['default'].exportApplicationGlobal;\n      var globalName;\n\n      if (typeof value === 'string') {\n        globalName = value;\n      } else {\n        globalName = Ember['default'].String.classify(config['default'].modulePrefix);\n      }\n\n      if (!window[globalName]) {\n        window[globalName] = application;\n\n        application.reopen({\n          willDestroy: function willDestroy() {\n            this._super.apply(this, arguments);\n            delete window[globalName];\n          }\n        });\n      }\n    }\n  }\n\n  exports['default'] = {\n    name: 'export-application-global',\n\n    initialize: initialize\n  };\n\n});","define('dummy/router', ['exports', 'ember', 'dummy/config/environment'], function (exports, Ember, config) {\n\n  'use strict';\n\n  var Router = Ember['default'].Router.extend({\n    location: config['default'].locationType\n  });\n\n  Router.map(function () {});\n\n  exports['default'] = Router;\n\n});","define('dummy/templates/application', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    return {\n      meta: {\n        \"revision\": \"Ember@1.13.7\",\n        \"loc\": {\n          \"source\": null,\n          \"start\": {\n            \"line\": 1,\n            \"column\": 0\n          },\n          \"end\": {\n            \"line\": 4,\n            \"column\": 0\n          }\n        },\n        \"moduleName\": \"dummy/templates/application.hbs\"\n      },\n      arity: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      buildFragment: function buildFragment(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createElement(\"h2\");\n        dom.setAttribute(el1,\"id\",\"title\");\n        var el2 = dom.createTextNode(\"Ember SVG Charts\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createComment(\"\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n        var morphs = new Array(1);\n        morphs[0] = dom.createMorphAt(fragment,2,2,contextualElement);\n        return morphs;\n      },\n      statements: [\n        [\"content\",\"outlet\",[\"loc\",[null,[3,0],[3,10]]]]\n      ],\n      locals: [],\n      templates: []\n    };\n  }()));\n\n});","define('dummy/templates/index', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      return {\n        meta: {\n          \"revision\": \"Ember@1.13.7\",\n          \"loc\": {\n            \"source\": null,\n            \"start\": {\n              \"line\": 38,\n              \"column\": 8\n            },\n            \"end\": {\n              \"line\": 42,\n              \"column\": 8\n            }\n          },\n          \"moduleName\": \"dummy/templates/index.hbs\"\n        },\n        arity: 1,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"            \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"option\");\n          var el2 = dom.createTextNode(\"\\n                \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createComment(\"\");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n            \");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var element0 = dom.childAt(fragment, [1]);\n          var morphs = new Array(2);\n          morphs[0] = dom.createAttrMorph(element0, 'value');\n          morphs[1] = dom.createMorphAt(element0,1,1);\n          return morphs;\n        },\n        statements: [\n          [\"attribute\",\"value\",[\"concat\",[[\"get\",\"type\",[\"loc\",[null,[39,29],[39,33]]]]]]],\n          [\"content\",\"type\",[\"loc\",[null,[40,16],[40,24]]]]\n        ],\n        locals: [\"type\"],\n        templates: []\n      };\n    }());\n    return {\n      meta: {\n        \"revision\": \"Ember@1.13.7\",\n        \"loc\": {\n          \"source\": null,\n          \"start\": {\n            \"line\": 1,\n            \"column\": 0\n          },\n          \"end\": {\n            \"line\": 98,\n            \"column\": 0\n          }\n        },\n        \"moduleName\": \"dummy/templates/index.hbs\"\n      },\n      arity: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      buildFragment: function buildFragment(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createElement(\"h2\");\n        var el2 = dom.createTextNode(\"Example 1\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"div\");\n        dom.setAttribute(el1,\"class\",\"docColumn\");\n        var el2 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"h5\");\n        var el3 = dom.createTextNode(\"Template\");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"pre\");\n        var el3 = dom.createTextNode(\"{{svg-chart\\n    series=data\\n    type=chartType\\n    xAxisLabels=xAxisLabels\\n    xAxisTitle='Demo Chart'\\n    yAxisTitle='Some Numbers'\\n}}\");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\\n    \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"h5\");\n        var el3 = dom.createTextNode(\"Controller\");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"pre\");\n        var el3 = dom.createTextNode(\"chartType: 'column',\\n\\nxAxisLabels: [\\n    'first', 'second', 'third', 'fourth', 'fifth'\\n],\\n\\ndata: [\\n    {\\n        title: 'set one',\\n        data: [.30, .60, .40, .70, .10]\\n    },\\n    {\\n        title: 'set 2',\\n        data: [.20, .50, .20, .50, .20]\\n    },\\n    {\\n        title: 'third set',\\n        data: [.30, .40, .30, .40, .10]\\n    }\\n]\");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"div\");\n        dom.setAttribute(el1,\"class\",\"exampleColumn\");\n        var el2 = dom.createTextNode(\"\\n    Chart Type:\\n    \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"select\");\n        dom.setAttribute(el2,\"id\",\"chartPicker\");\n        var el3 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createComment(\"\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"    \");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\\n    \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"br\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"br\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\\n    \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createComment(\"\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\\n\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"div\");\n        dom.setAttribute(el1,\"class\",\"cb\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\\n\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"h2\");\n        var el2 = dom.createTextNode(\"Example 2\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"div\");\n        dom.setAttribute(el1,\"class\",\"docColumn\");\n        var el2 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"h5\");\n        var el3 = dom.createTextNode(\"Template\");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"pre\");\n        var el3 = dom.createTextNode(\"{{svg-chart\\n    series=pieData\\n    type=\\\"pie\\\"\\n}}\");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\\n    \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"h5\");\n        var el3 = dom.createTextNode(\"Controller\");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"pre\");\n        var el3 = dom.createTextNode(\"pieData: [\\n    {\\n        title: 'one',\\n        data: 13\\n    },\\n    {\\n        title: 'two',\\n        data: 3.2\\n    },\\n    {\\n        title: 'three',\\n        data: 5.5\\n    },\\n    {\\n        title: 'four',\\n        data: 10\\n    }\\n]\");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"div\");\n        dom.setAttribute(el1,\"class\",\"exampleColumn\");\n        dom.setAttribute(el1,\"id\",\"pieExample\");\n        var el2 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createComment(\"\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\\n\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"div\");\n        dom.setAttribute(el1,\"class\",\"cb\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n        var element1 = dom.childAt(fragment, [4]);\n        var element2 = dom.childAt(element1, [1]);\n        var morphs = new Array(4);\n        morphs[0] = dom.createElementMorph(element2);\n        morphs[1] = dom.createMorphAt(element2,1,1);\n        morphs[2] = dom.createMorphAt(element1,6,6);\n        morphs[3] = dom.createMorphAt(dom.childAt(fragment, [12]),1,1);\n        return morphs;\n      },\n      statements: [\n        [\"element\",\"action\",[\"change\"],[\"on\",\"change\"],[\"loc\",[null,[37,29],[37,60]]]],\n        [\"block\",\"each\",[[\"get\",\"chartTypes\",[\"loc\",[null,[38,16],[38,26]]]]],[\"key\",\"@index\"],0,null,[\"loc\",[null,[38,8],[42,17]]]],\n        [\"inline\",\"svg-chart\",[],[\"series\",[\"subexpr\",\"@mut\",[[\"get\",\"data\",[\"loc\",[null,[48,15],[48,19]]]]],[],[]],\"type\",[\"subexpr\",\"@mut\",[[\"get\",\"chartType\",[\"loc\",[null,[49,13],[49,22]]]]],[],[]],\"xAxisLabels\",[\"subexpr\",\"@mut\",[[\"get\",\"xAxisLabels\",[\"loc\",[null,[50,20],[50,31]]]]],[],[]],\"xAxisTitle\",\"Demo Chart\",\"yAxisTitle\",\"Some Numbers\"],[\"loc\",[null,[47,4],[53,6]]]],\n        [\"inline\",\"svg-chart\",[],[\"series\",[\"subexpr\",\"@mut\",[[\"get\",\"pieData\",[\"loc\",[null,[91,15],[91,22]]]]],[],[]],\"type\",\"pie\"],[\"loc\",[null,[90,4],[93,6]]]]\n      ],\n      locals: [],\n      templates: [child0]\n    };\n  }()));\n\n});","define('dummy/tests/app.jshint', function () {\n\n  'use strict';\n\n  QUnit.module('JSHint - .');\n  QUnit.test('app.js should pass jshint', function(assert) { \n    assert.expect(1);\n    assert.ok(true, 'app.js should pass jshint.'); \n  });\n\n});","define('dummy/tests/controllers/index.jshint', function () {\n\n  'use strict';\n\n  QUnit.module('JSHint - controllers');\n  QUnit.test('controllers/index.js should pass jshint', function(assert) { \n    assert.expect(1);\n    assert.ok(false, 'controllers/index.js should pass jshint.\\ncontrollers/index.js: line 26, col 23, A leading decimal point can be confused with a dot: \\'.30\\'.\\ncontrollers/index.js: line 26, col 28, A leading decimal point can be confused with a dot: \\'.60\\'.\\ncontrollers/index.js: line 26, col 33, A leading decimal point can be confused with a dot: \\'.40\\'.\\ncontrollers/index.js: line 26, col 38, A leading decimal point can be confused with a dot: \\'.70\\'.\\ncontrollers/index.js: line 26, col 43, A leading decimal point can be confused with a dot: \\'.10\\'.\\ncontrollers/index.js: line 30, col 23, A leading decimal point can be confused with a dot: \\'.20\\'.\\ncontrollers/index.js: line 30, col 28, A leading decimal point can be confused with a dot: \\'.50\\'.\\ncontrollers/index.js: line 30, col 33, A leading decimal point can be confused with a dot: \\'.20\\'.\\ncontrollers/index.js: line 30, col 38, A leading decimal point can be confused with a dot: \\'.50\\'.\\ncontrollers/index.js: line 30, col 43, A leading decimal point can be confused with a dot: \\'.20\\'.\\ncontrollers/index.js: line 34, col 23, A leading decimal point can be confused with a dot: \\'.30\\'.\\ncontrollers/index.js: line 34, col 28, A leading decimal point can be confused with a dot: \\'.40\\'.\\ncontrollers/index.js: line 34, col 33, A leading decimal point can be confused with a dot: \\'.30\\'.\\ncontrollers/index.js: line 34, col 38, A leading decimal point can be confused with a dot: \\'.40\\'.\\ncontrollers/index.js: line 34, col 43, A leading decimal point can be confused with a dot: \\'.10\\'.\\n\\n15 errors'); \n  });\n\n});","define('dummy/tests/helpers/resolver', ['exports', 'ember/resolver', 'dummy/config/environment'], function (exports, Resolver, config) {\n\n  'use strict';\n\n  var resolver = Resolver['default'].create();\n\n  resolver.namespace = {\n    modulePrefix: config['default'].modulePrefix,\n    podModulePrefix: config['default'].podModulePrefix\n  };\n\n  exports['default'] = resolver;\n\n});","define('dummy/tests/helpers/resolver.jshint', function () {\n\n  'use strict';\n\n  QUnit.module('JSHint - helpers');\n  QUnit.test('helpers/resolver.js should pass jshint', function(assert) { \n    assert.expect(1);\n    assert.ok(true, 'helpers/resolver.js should pass jshint.'); \n  });\n\n});","define('dummy/tests/helpers/start-app', ['exports', 'ember', 'dummy/app', 'dummy/config/environment'], function (exports, Ember, Application, config) {\n\n  'use strict';\n\n\n\n  exports['default'] = startApp;\n  function startApp(attrs) {\n    var application;\n\n    var attributes = Ember['default'].merge({}, config['default'].APP);\n    attributes = Ember['default'].merge(attributes, attrs); // use defaults, but you can override;\n\n    Ember['default'].run(function () {\n      application = Application['default'].create(attributes);\n      application.setupForTesting();\n      application.injectTestHelpers();\n    });\n\n    return application;\n  }\n\n});","define('dummy/tests/helpers/start-app.jshint', function () {\n\n  'use strict';\n\n  QUnit.module('JSHint - helpers');\n  QUnit.test('helpers/start-app.js should pass jshint', function(assert) { \n    assert.expect(1);\n    assert.ok(true, 'helpers/start-app.js should pass jshint.'); \n  });\n\n});","define('dummy/tests/integration/components/svg-chart-bar-test', ['ember-qunit'], function (ember_qunit) {\n\n    'use strict';\n\n    ember_qunit.moduleForComponent('svg-chart-bar', 'Integration | Component | svg chart bar', {\n        integration: true\n    });\n\n    ember_qunit.test('it renders', function (assert) {\n        assert.expect(2);\n\n        // Set any properties with this.set('myProperty', 'value');\n        // Handle any actions with this.on('myAction', function(val) { ... });\n\n        this.render(Ember.HTMLBars.template((function () {\n            return {\n                meta: {\n                    'revision': 'Ember@1.13.7',\n                    'loc': {\n                        'source': null,\n                        'start': {\n                            'line': 1,\n                            'column': 0\n                        },\n                        'end': {\n                            'line': 1,\n                            'column': 17\n                        }\n                    }\n                },\n                arity: 0,\n                cachedFragment: null,\n                hasRendered: false,\n                buildFragment: function buildFragment(dom) {\n                    var el0 = dom.createDocumentFragment();\n                    var el1 = dom.createComment('');\n                    dom.appendChild(el0, el1);\n                    return el0;\n                },\n                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                    var morphs = new Array(1);\n                    morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n                    dom.insertBoundary(fragment, 0);\n                    dom.insertBoundary(fragment, null);\n                    return morphs;\n                },\n                statements: [['content', 'svg-chart-bar', ['loc', [null, [1, 0], [1, 17]]]]],\n                locals: [],\n                templates: []\n            };\n        })()));\n\n        assert.equal(this.$().text().trim(), '');\n\n        // Template block usage:\n        this.render(Ember.HTMLBars.template((function () {\n            var child0 = (function () {\n                return {\n                    meta: {\n                        'revision': 'Ember@1.13.7',\n                        'loc': {\n                            'source': null,\n                            'start': {\n                                'line': 2,\n                                'column': 8\n                            },\n                            'end': {\n                                'line': 4,\n                                'column': 8\n                            }\n                        }\n                    },\n                    arity: 0,\n                    cachedFragment: null,\n                    hasRendered: false,\n                    buildFragment: function buildFragment(dom) {\n                        var el0 = dom.createDocumentFragment();\n                        var el1 = dom.createTextNode('            template block text\\n');\n                        dom.appendChild(el0, el1);\n                        return el0;\n                    },\n                    buildRenderNodes: function buildRenderNodes() {\n                        return [];\n                    },\n                    statements: [],\n                    locals: [],\n                    templates: []\n                };\n            })();\n\n            return {\n                meta: {\n                    'revision': 'Ember@1.13.7',\n                    'loc': {\n                        'source': null,\n                        'start': {\n                            'line': 1,\n                            'column': 0\n                        },\n                        'end': {\n                            'line': 5,\n                            'column': 4\n                        }\n                    }\n                },\n                arity: 0,\n                cachedFragment: null,\n                hasRendered: false,\n                buildFragment: function buildFragment(dom) {\n                    var el0 = dom.createDocumentFragment();\n                    var el1 = dom.createTextNode('\\n');\n                    dom.appendChild(el0, el1);\n                    var el1 = dom.createComment('');\n                    dom.appendChild(el0, el1);\n                    var el1 = dom.createTextNode('    ');\n                    dom.appendChild(el0, el1);\n                    return el0;\n                },\n                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                    var morphs = new Array(1);\n                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n                    return morphs;\n                },\n                statements: [['block', 'svg-chart-bar', [], [], 0, null, ['loc', [null, [2, 8], [4, 26]]]]],\n                locals: [],\n                templates: [child0]\n            };\n        })()));\n\n        assert.equal(this.$().text().trim(), 'template block text');\n    });\n\n});","define('dummy/tests/integration/components/svg-chart-bar-test.jshint', function () {\n\n  'use strict';\n\n  QUnit.module('JSHint - integration/components');\n  QUnit.test('integration/components/svg-chart-bar-test.js should pass jshint', function(assert) { \n    assert.expect(1);\n    assert.ok(true, 'integration/components/svg-chart-bar-test.js should pass jshint.'); \n  });\n\n});","define('dummy/tests/integration/components/svg-chart-base-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleForComponent('svg-chart-base', 'Integration | Component | svg chart base', {\n    integration: true\n  });\n\n  ember_qunit.test('it renders', function (assert) {\n    assert.expect(2);\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'revision': 'Ember@1.13.7',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 18\n            }\n          }\n        },\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'svg-chart-base', ['loc', [null, [1, 0], [1, 18]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'revision': 'Ember@1.13.7',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      template block text\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes() {\n            return [];\n          },\n          statements: [],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'revision': 'Ember@1.13.7',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'svg-chart-base', [], [], 0, null, ['loc', [null, [2, 4], [4, 23]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n\n});","define('dummy/tests/integration/components/svg-chart-base-test.jshint', function () {\n\n  'use strict';\n\n  QUnit.module('JSHint - integration/components');\n  QUnit.test('integration/components/svg-chart-base-test.js should pass jshint', function(assert) { \n    assert.expect(1);\n    assert.ok(true, 'integration/components/svg-chart-base-test.js should pass jshint.'); \n  });\n\n});","define('dummy/tests/integration/components/svg-chart-column-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleForComponent('svg-chart-column', 'Integration | Component | svg chart column', {\n    integration: true\n  });\n\n  ember_qunit.test('it renders', function (assert) {\n    assert.expect(2);\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'revision': 'Ember@1.13.7',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 20\n            }\n          }\n        },\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'svg-chart-column', ['loc', [null, [1, 0], [1, 20]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'revision': 'Ember@1.13.7',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      template block text\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes() {\n            return [];\n          },\n          statements: [],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'revision': 'Ember@1.13.7',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'svg-chart-column', [], [], 0, null, ['loc', [null, [2, 4], [4, 25]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n\n});","define('dummy/tests/integration/components/svg-chart-column-test.jshint', function () {\n\n  'use strict';\n\n  QUnit.module('JSHint - integration/components');\n  QUnit.test('integration/components/svg-chart-column-test.js should pass jshint', function(assert) { \n    assert.expect(1);\n    assert.ok(true, 'integration/components/svg-chart-column-test.js should pass jshint.'); \n  });\n\n});","define('dummy/tests/integration/components/svg-chart-grid-test', ['ember-qunit'], function (ember_qunit) {\n\n    'use strict';\n\n    ember_qunit.moduleForComponent('svg-chart-grid', 'Integration | Component | svg chart grid', {\n        integration: true\n    });\n\n    ember_qunit.test('it renders', function (assert) {\n        assert.expect(2);\n\n        // Set any properties with this.set('myProperty', 'value');\n        // Handle any actions with this.on('myAction', function(val) { ... });\n\n        this.render(Ember.HTMLBars.template((function () {\n            return {\n                meta: {\n                    'revision': 'Ember@1.13.7',\n                    'loc': {\n                        'source': null,\n                        'start': {\n                            'line': 1,\n                            'column': 0\n                        },\n                        'end': {\n                            'line': 1,\n                            'column': 18\n                        }\n                    }\n                },\n                arity: 0,\n                cachedFragment: null,\n                hasRendered: false,\n                buildFragment: function buildFragment(dom) {\n                    var el0 = dom.createDocumentFragment();\n                    var el1 = dom.createComment('');\n                    dom.appendChild(el0, el1);\n                    return el0;\n                },\n                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                    var morphs = new Array(1);\n                    morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n                    dom.insertBoundary(fragment, 0);\n                    dom.insertBoundary(fragment, null);\n                    return morphs;\n                },\n                statements: [['content', 'svg-chart-grid', ['loc', [null, [1, 0], [1, 18]]]]],\n                locals: [],\n                templates: []\n            };\n        })()));\n\n        assert.equal(this.$().text().trim(), '');\n\n        // Template block usage:\n        this.render(Ember.HTMLBars.template((function () {\n            var child0 = (function () {\n                return {\n                    meta: {\n                        'revision': 'Ember@1.13.7',\n                        'loc': {\n                            'source': null,\n                            'start': {\n                                'line': 2,\n                                'column': 8\n                            },\n                            'end': {\n                                'line': 4,\n                                'column': 8\n                            }\n                        }\n                    },\n                    arity: 0,\n                    cachedFragment: null,\n                    hasRendered: false,\n                    buildFragment: function buildFragment(dom) {\n                        var el0 = dom.createDocumentFragment();\n                        var el1 = dom.createTextNode('            template block text\\n');\n                        dom.appendChild(el0, el1);\n                        return el0;\n                    },\n                    buildRenderNodes: function buildRenderNodes() {\n                        return [];\n                    },\n                    statements: [],\n                    locals: [],\n                    templates: []\n                };\n            })();\n\n            return {\n                meta: {\n                    'revision': 'Ember@1.13.7',\n                    'loc': {\n                        'source': null,\n                        'start': {\n                            'line': 1,\n                            'column': 0\n                        },\n                        'end': {\n                            'line': 5,\n                            'column': 4\n                        }\n                    }\n                },\n                arity: 0,\n                cachedFragment: null,\n                hasRendered: false,\n                buildFragment: function buildFragment(dom) {\n                    var el0 = dom.createDocumentFragment();\n                    var el1 = dom.createTextNode('\\n');\n                    dom.appendChild(el0, el1);\n                    var el1 = dom.createComment('');\n                    dom.appendChild(el0, el1);\n                    var el1 = dom.createTextNode('    ');\n                    dom.appendChild(el0, el1);\n                    return el0;\n                },\n                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                    var morphs = new Array(1);\n                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n                    return morphs;\n                },\n                statements: [['block', 'svg-chart-grid', [], [], 0, null, ['loc', [null, [2, 8], [4, 27]]]]],\n                locals: [],\n                templates: [child0]\n            };\n        })()));\n\n        assert.equal(this.$().text().trim(), 'template block text');\n    });\n\n});","define('dummy/tests/integration/components/svg-chart-grid-test.jshint', function () {\n\n  'use strict';\n\n  QUnit.module('JSHint - integration/components');\n  QUnit.test('integration/components/svg-chart-grid-test.js should pass jshint', function(assert) { \n    assert.expect(1);\n    assert.ok(true, 'integration/components/svg-chart-grid-test.js should pass jshint.'); \n  });\n\n});","define('dummy/tests/integration/components/svg-chart-legend-test', ['ember-qunit'], function (ember_qunit) {\n\n    'use strict';\n\n    ember_qunit.moduleForComponent('svg-chart-legend', 'Integration | Component | svg chart legend', {\n        integration: true\n    });\n\n    ember_qunit.test('it renders', function (assert) {\n        assert.expect(2);\n\n        // Set any properties with this.set('myProperty', 'value');\n        // Handle any actions with this.on('myAction', function(val) { ... });\n\n        this.render(Ember.HTMLBars.template((function () {\n            return {\n                meta: {\n                    'revision': 'Ember@1.13.7',\n                    'loc': {\n                        'source': null,\n                        'start': {\n                            'line': 1,\n                            'column': 0\n                        },\n                        'end': {\n                            'line': 1,\n                            'column': 20\n                        }\n                    }\n                },\n                arity: 0,\n                cachedFragment: null,\n                hasRendered: false,\n                buildFragment: function buildFragment(dom) {\n                    var el0 = dom.createDocumentFragment();\n                    var el1 = dom.createComment('');\n                    dom.appendChild(el0, el1);\n                    return el0;\n                },\n                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                    var morphs = new Array(1);\n                    morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n                    dom.insertBoundary(fragment, 0);\n                    dom.insertBoundary(fragment, null);\n                    return morphs;\n                },\n                statements: [['content', 'svg-chart-legend', ['loc', [null, [1, 0], [1, 20]]]]],\n                locals: [],\n                templates: []\n            };\n        })()));\n\n        assert.equal(this.$().text().trim(), '');\n\n        // Template block usage:\n        this.render(Ember.HTMLBars.template((function () {\n            var child0 = (function () {\n                return {\n                    meta: {\n                        'revision': 'Ember@1.13.7',\n                        'loc': {\n                            'source': null,\n                            'start': {\n                                'line': 2,\n                                'column': 8\n                            },\n                            'end': {\n                                'line': 4,\n                                'column': 8\n                            }\n                        }\n                    },\n                    arity: 0,\n                    cachedFragment: null,\n                    hasRendered: false,\n                    buildFragment: function buildFragment(dom) {\n                        var el0 = dom.createDocumentFragment();\n                        var el1 = dom.createTextNode('            template block text\\n');\n                        dom.appendChild(el0, el1);\n                        return el0;\n                    },\n                    buildRenderNodes: function buildRenderNodes() {\n                        return [];\n                    },\n                    statements: [],\n                    locals: [],\n                    templates: []\n                };\n            })();\n\n            return {\n                meta: {\n                    'revision': 'Ember@1.13.7',\n                    'loc': {\n                        'source': null,\n                        'start': {\n                            'line': 1,\n                            'column': 0\n                        },\n                        'end': {\n                            'line': 5,\n                            'column': 4\n                        }\n                    }\n                },\n                arity: 0,\n                cachedFragment: null,\n                hasRendered: false,\n                buildFragment: function buildFragment(dom) {\n                    var el0 = dom.createDocumentFragment();\n                    var el1 = dom.createTextNode('\\n');\n                    dom.appendChild(el0, el1);\n                    var el1 = dom.createComment('');\n                    dom.appendChild(el0, el1);\n                    var el1 = dom.createTextNode('    ');\n                    dom.appendChild(el0, el1);\n                    return el0;\n                },\n                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                    var morphs = new Array(1);\n                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n                    return morphs;\n                },\n                statements: [['block', 'svg-chart-legend', [], [], 0, null, ['loc', [null, [2, 8], [4, 29]]]]],\n                locals: [],\n                templates: [child0]\n            };\n        })()));\n\n        assert.equal(this.$().text().trim(), 'template block text');\n    });\n\n});","define('dummy/tests/integration/components/svg-chart-legend-test.jshint', function () {\n\n  'use strict';\n\n  QUnit.module('JSHint - integration/components');\n  QUnit.test('integration/components/svg-chart-legend-test.js should pass jshint', function(assert) { \n    assert.expect(1);\n    assert.ok(true, 'integration/components/svg-chart-legend-test.js should pass jshint.'); \n  });\n\n});","define('dummy/tests/integration/components/svg-chart-line-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleForComponent('svg-chart-line', 'Integration | Component | svg chart line', {\n    integration: true\n  });\n\n  ember_qunit.test('it renders', function (assert) {\n    assert.expect(2);\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'revision': 'Ember@1.13.7',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 18\n            }\n          }\n        },\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'svg-chart-line', ['loc', [null, [1, 0], [1, 18]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'revision': 'Ember@1.13.7',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      template block text\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes() {\n            return [];\n          },\n          statements: [],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'revision': 'Ember@1.13.7',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'svg-chart-line', [], [], 0, null, ['loc', [null, [2, 4], [4, 23]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n\n});","define('dummy/tests/integration/components/svg-chart-line-test.jshint', function () {\n\n  'use strict';\n\n  QUnit.module('JSHint - integration/components');\n  QUnit.test('integration/components/svg-chart-line-test.js should pass jshint', function(assert) { \n    assert.expect(1);\n    assert.ok(true, 'integration/components/svg-chart-line-test.js should pass jshint.'); \n  });\n\n});","define('dummy/tests/integration/components/svg-chart-test', ['ember-qunit'], function (ember_qunit) {\n\n    'use strict';\n\n    ember_qunit.moduleForComponent('svg-chart', 'Integration | Component | svg chart', {\n        integration: true\n    });\n\n    ember_qunit.test('it renders', function (assert) {\n        assert.expect(2);\n\n        // Set any properties with this.set('myProperty', 'value');\n        // Handle any actions with this.on('myAction', function(val) { ... });\n\n        this.render(Ember.HTMLBars.template((function () {\n            return {\n                meta: {\n                    'revision': 'Ember@1.13.7',\n                    'loc': {\n                        'source': null,\n                        'start': {\n                            'line': 1,\n                            'column': 0\n                        },\n                        'end': {\n                            'line': 1,\n                            'column': 13\n                        }\n                    }\n                },\n                arity: 0,\n                cachedFragment: null,\n                hasRendered: false,\n                buildFragment: function buildFragment(dom) {\n                    var el0 = dom.createDocumentFragment();\n                    var el1 = dom.createComment('');\n                    dom.appendChild(el0, el1);\n                    return el0;\n                },\n                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                    var morphs = new Array(1);\n                    morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n                    dom.insertBoundary(fragment, 0);\n                    dom.insertBoundary(fragment, null);\n                    return morphs;\n                },\n                statements: [['content', 'svg-chart', ['loc', [null, [1, 0], [1, 13]]]]],\n                locals: [],\n                templates: []\n            };\n        })()));\n\n        assert.equal(this.$().text().trim(), '');\n\n        // Template block usage:\n        this.render(Ember.HTMLBars.template((function () {\n            var child0 = (function () {\n                return {\n                    meta: {\n                        'revision': 'Ember@1.13.7',\n                        'loc': {\n                            'source': null,\n                            'start': {\n                                'line': 2,\n                                'column': 8\n                            },\n                            'end': {\n                                'line': 4,\n                                'column': 8\n                            }\n                        }\n                    },\n                    arity: 0,\n                    cachedFragment: null,\n                    hasRendered: false,\n                    buildFragment: function buildFragment(dom) {\n                        var el0 = dom.createDocumentFragment();\n                        var el1 = dom.createTextNode('            template block text\\n');\n                        dom.appendChild(el0, el1);\n                        return el0;\n                    },\n                    buildRenderNodes: function buildRenderNodes() {\n                        return [];\n                    },\n                    statements: [],\n                    locals: [],\n                    templates: []\n                };\n            })();\n\n            return {\n                meta: {\n                    'revision': 'Ember@1.13.7',\n                    'loc': {\n                        'source': null,\n                        'start': {\n                            'line': 1,\n                            'column': 0\n                        },\n                        'end': {\n                            'line': 5,\n                            'column': 4\n                        }\n                    }\n                },\n                arity: 0,\n                cachedFragment: null,\n                hasRendered: false,\n                buildFragment: function buildFragment(dom) {\n                    var el0 = dom.createDocumentFragment();\n                    var el1 = dom.createTextNode('\\n');\n                    dom.appendChild(el0, el1);\n                    var el1 = dom.createComment('');\n                    dom.appendChild(el0, el1);\n                    var el1 = dom.createTextNode('    ');\n                    dom.appendChild(el0, el1);\n                    return el0;\n                },\n                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                    var morphs = new Array(1);\n                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n                    return morphs;\n                },\n                statements: [['block', 'svg-chart', [], [], 0, null, ['loc', [null, [2, 8], [4, 22]]]]],\n                locals: [],\n                templates: [child0]\n            };\n        })()));\n\n        assert.equal(this.$().text().trim(), 'template block text');\n    });\n\n});","define('dummy/tests/integration/components/svg-chart-test.jshint', function () {\n\n  'use strict';\n\n  QUnit.module('JSHint - integration/components');\n  QUnit.test('integration/components/svg-chart-test.js should pass jshint', function(assert) { \n    assert.expect(1);\n    assert.ok(true, 'integration/components/svg-chart-test.js should pass jshint.'); \n  });\n\n});","define('dummy/tests/integration/components/svg-chart-text-test', ['ember-qunit'], function (ember_qunit) {\n\n    'use strict';\n\n    ember_qunit.moduleForComponent('svg-chart-text', 'Integration | Component | svg chart text', {\n        integration: true\n    });\n\n    ember_qunit.test('it renders', function (assert) {\n        assert.expect(2);\n\n        // Set any properties with this.set('myProperty', 'value');\n        // Handle any actions with this.on('myAction', function(val) { ... });\n\n        this.render(Ember.HTMLBars.template((function () {\n            return {\n                meta: {\n                    'revision': 'Ember@1.13.7',\n                    'loc': {\n                        'source': null,\n                        'start': {\n                            'line': 1,\n                            'column': 0\n                        },\n                        'end': {\n                            'line': 1,\n                            'column': 18\n                        }\n                    }\n                },\n                arity: 0,\n                cachedFragment: null,\n                hasRendered: false,\n                buildFragment: function buildFragment(dom) {\n                    var el0 = dom.createDocumentFragment();\n                    var el1 = dom.createComment('');\n                    dom.appendChild(el0, el1);\n                    return el0;\n                },\n                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                    var morphs = new Array(1);\n                    morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n                    dom.insertBoundary(fragment, 0);\n                    dom.insertBoundary(fragment, null);\n                    return morphs;\n                },\n                statements: [['content', 'svg-chart-text', ['loc', [null, [1, 0], [1, 18]]]]],\n                locals: [],\n                templates: []\n            };\n        })()));\n\n        assert.equal(this.$().text().trim(), '');\n\n        // Template block usage:\n        this.render(Ember.HTMLBars.template((function () {\n            var child0 = (function () {\n                return {\n                    meta: {\n                        'revision': 'Ember@1.13.7',\n                        'loc': {\n                            'source': null,\n                            'start': {\n                                'line': 2,\n                                'column': 8\n                            },\n                            'end': {\n                                'line': 4,\n                                'column': 8\n                            }\n                        }\n                    },\n                    arity: 0,\n                    cachedFragment: null,\n                    hasRendered: false,\n                    buildFragment: function buildFragment(dom) {\n                        var el0 = dom.createDocumentFragment();\n                        var el1 = dom.createTextNode('            template block text\\n');\n                        dom.appendChild(el0, el1);\n                        return el0;\n                    },\n                    buildRenderNodes: function buildRenderNodes() {\n                        return [];\n                    },\n                    statements: [],\n                    locals: [],\n                    templates: []\n                };\n            })();\n\n            return {\n                meta: {\n                    'revision': 'Ember@1.13.7',\n                    'loc': {\n                        'source': null,\n                        'start': {\n                            'line': 1,\n                            'column': 0\n                        },\n                        'end': {\n                            'line': 5,\n                            'column': 4\n                        }\n                    }\n                },\n                arity: 0,\n                cachedFragment: null,\n                hasRendered: false,\n                buildFragment: function buildFragment(dom) {\n                    var el0 = dom.createDocumentFragment();\n                    var el1 = dom.createTextNode('\\n');\n                    dom.appendChild(el0, el1);\n                    var el1 = dom.createComment('');\n                    dom.appendChild(el0, el1);\n                    var el1 = dom.createTextNode('    ');\n                    dom.appendChild(el0, el1);\n                    return el0;\n                },\n                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                    var morphs = new Array(1);\n                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n                    return morphs;\n                },\n                statements: [['block', 'svg-chart-text', [], [], 0, null, ['loc', [null, [2, 8], [4, 27]]]]],\n                locals: [],\n                templates: [child0]\n            };\n        })()));\n\n        assert.equal(this.$().text().trim(), 'template block text');\n    });\n\n});","define('dummy/tests/integration/components/svg-chart-text-test.jshint', function () {\n\n  'use strict';\n\n  QUnit.module('JSHint - integration/components');\n  QUnit.test('integration/components/svg-chart-text-test.js should pass jshint', function(assert) { \n    assert.expect(1);\n    assert.ok(true, 'integration/components/svg-chart-text-test.js should pass jshint.'); \n  });\n\n});","define('dummy/tests/integration/components/svg-chart-x-axis-test', ['ember-qunit'], function (ember_qunit) {\n\n    'use strict';\n\n    ember_qunit.moduleForComponent('svg-chart-x-axis', 'Integration | Component | svg chart x axis', {\n        integration: true\n    });\n\n    ember_qunit.test('it renders', function (assert) {\n        assert.expect(2);\n\n        // Set any properties with this.set('myProperty', 'value');\n        // Handle any actions with this.on('myAction', function(val) { ... });\n\n        this.render(Ember.HTMLBars.template((function () {\n            return {\n                meta: {\n                    'revision': 'Ember@1.13.7',\n                    'loc': {\n                        'source': null,\n                        'start': {\n                            'line': 1,\n                            'column': 0\n                        },\n                        'end': {\n                            'line': 1,\n                            'column': 20\n                        }\n                    }\n                },\n                arity: 0,\n                cachedFragment: null,\n                hasRendered: false,\n                buildFragment: function buildFragment(dom) {\n                    var el0 = dom.createDocumentFragment();\n                    var el1 = dom.createComment('');\n                    dom.appendChild(el0, el1);\n                    return el0;\n                },\n                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                    var morphs = new Array(1);\n                    morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n                    dom.insertBoundary(fragment, 0);\n                    dom.insertBoundary(fragment, null);\n                    return morphs;\n                },\n                statements: [['content', 'svg-chart-x-axis', ['loc', [null, [1, 0], [1, 20]]]]],\n                locals: [],\n                templates: []\n            };\n        })()));\n\n        assert.equal(this.$().text().trim(), '');\n\n        // Template block usage:\n        this.render(Ember.HTMLBars.template((function () {\n            var child0 = (function () {\n                return {\n                    meta: {\n                        'revision': 'Ember@1.13.7',\n                        'loc': {\n                            'source': null,\n                            'start': {\n                                'line': 2,\n                                'column': 8\n                            },\n                            'end': {\n                                'line': 4,\n                                'column': 8\n                            }\n                        }\n                    },\n                    arity: 0,\n                    cachedFragment: null,\n                    hasRendered: false,\n                    buildFragment: function buildFragment(dom) {\n                        var el0 = dom.createDocumentFragment();\n                        var el1 = dom.createTextNode('            template block text\\n');\n                        dom.appendChild(el0, el1);\n                        return el0;\n                    },\n                    buildRenderNodes: function buildRenderNodes() {\n                        return [];\n                    },\n                    statements: [],\n                    locals: [],\n                    templates: []\n                };\n            })();\n\n            return {\n                meta: {\n                    'revision': 'Ember@1.13.7',\n                    'loc': {\n                        'source': null,\n                        'start': {\n                            'line': 1,\n                            'column': 0\n                        },\n                        'end': {\n                            'line': 5,\n                            'column': 4\n                        }\n                    }\n                },\n                arity: 0,\n                cachedFragment: null,\n                hasRendered: false,\n                buildFragment: function buildFragment(dom) {\n                    var el0 = dom.createDocumentFragment();\n                    var el1 = dom.createTextNode('\\n');\n                    dom.appendChild(el0, el1);\n                    var el1 = dom.createComment('');\n                    dom.appendChild(el0, el1);\n                    var el1 = dom.createTextNode('    ');\n                    dom.appendChild(el0, el1);\n                    return el0;\n                },\n                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                    var morphs = new Array(1);\n                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n                    return morphs;\n                },\n                statements: [['block', 'svg-chart-x-axis', [], [], 0, null, ['loc', [null, [2, 8], [4, 29]]]]],\n                locals: [],\n                templates: [child0]\n            };\n        })()));\n\n        assert.equal(this.$().text().trim(), 'template block text');\n    });\n\n});","define('dummy/tests/integration/components/svg-chart-x-axis-test.jshint', function () {\n\n  'use strict';\n\n  QUnit.module('JSHint - integration/components');\n  QUnit.test('integration/components/svg-chart-x-axis-test.js should pass jshint', function(assert) { \n    assert.expect(1);\n    assert.ok(true, 'integration/components/svg-chart-x-axis-test.js should pass jshint.'); \n  });\n\n});","define('dummy/tests/integration/components/svg-chart-y-axis-test', ['ember-qunit'], function (ember_qunit) {\n\n    'use strict';\n\n    ember_qunit.moduleForComponent('svg-chart-y-axis', 'Integration | Component | svg chart y axis', {\n        integration: true\n    });\n\n    ember_qunit.test('it renders', function (assert) {\n        assert.expect(2);\n\n        // Set any properties with this.set('myProperty', 'value');\n        // Handle any actions with this.on('myAction', function(val) { ... });\n\n        this.render(Ember.HTMLBars.template((function () {\n            return {\n                meta: {\n                    'revision': 'Ember@1.13.7',\n                    'loc': {\n                        'source': null,\n                        'start': {\n                            'line': 1,\n                            'column': 0\n                        },\n                        'end': {\n                            'line': 1,\n                            'column': 20\n                        }\n                    }\n                },\n                arity: 0,\n                cachedFragment: null,\n                hasRendered: false,\n                buildFragment: function buildFragment(dom) {\n                    var el0 = dom.createDocumentFragment();\n                    var el1 = dom.createComment('');\n                    dom.appendChild(el0, el1);\n                    return el0;\n                },\n                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                    var morphs = new Array(1);\n                    morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n                    dom.insertBoundary(fragment, 0);\n                    dom.insertBoundary(fragment, null);\n                    return morphs;\n                },\n                statements: [['content', 'svg-chart-y-axis', ['loc', [null, [1, 0], [1, 20]]]]],\n                locals: [],\n                templates: []\n            };\n        })()));\n\n        assert.equal(this.$().text().trim(), '');\n\n        // Template block usage:\n        this.render(Ember.HTMLBars.template((function () {\n            var child0 = (function () {\n                return {\n                    meta: {\n                        'revision': 'Ember@1.13.7',\n                        'loc': {\n                            'source': null,\n                            'start': {\n                                'line': 2,\n                                'column': 8\n                            },\n                            'end': {\n                                'line': 4,\n                                'column': 8\n                            }\n                        }\n                    },\n                    arity: 0,\n                    cachedFragment: null,\n                    hasRendered: false,\n                    buildFragment: function buildFragment(dom) {\n                        var el0 = dom.createDocumentFragment();\n                        var el1 = dom.createTextNode('            template block text\\n');\n                        dom.appendChild(el0, el1);\n                        return el0;\n                    },\n                    buildRenderNodes: function buildRenderNodes() {\n                        return [];\n                    },\n                    statements: [],\n                    locals: [],\n                    templates: []\n                };\n            })();\n\n            return {\n                meta: {\n                    'revision': 'Ember@1.13.7',\n                    'loc': {\n                        'source': null,\n                        'start': {\n                            'line': 1,\n                            'column': 0\n                        },\n                        'end': {\n                            'line': 5,\n                            'column': 4\n                        }\n                    }\n                },\n                arity: 0,\n                cachedFragment: null,\n                hasRendered: false,\n                buildFragment: function buildFragment(dom) {\n                    var el0 = dom.createDocumentFragment();\n                    var el1 = dom.createTextNode('\\n');\n                    dom.appendChild(el0, el1);\n                    var el1 = dom.createComment('');\n                    dom.appendChild(el0, el1);\n                    var el1 = dom.createTextNode('    ');\n                    dom.appendChild(el0, el1);\n                    return el0;\n                },\n                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n                    var morphs = new Array(1);\n                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n                    return morphs;\n                },\n                statements: [['block', 'svg-chart-y-axis', [], [], 0, null, ['loc', [null, [2, 8], [4, 29]]]]],\n                locals: [],\n                templates: [child0]\n            };\n        })()));\n\n        assert.equal(this.$().text().trim(), 'template block text');\n    });\n\n});","define('dummy/tests/integration/components/svg-chart-y-axis-test.jshint', function () {\n\n  'use strict';\n\n  QUnit.module('JSHint - integration/components');\n  QUnit.test('integration/components/svg-chart-y-axis-test.js should pass jshint', function(assert) { \n    assert.expect(1);\n    assert.ok(true, 'integration/components/svg-chart-y-axis-test.js should pass jshint.'); \n  });\n\n});","define('dummy/tests/router.jshint', function () {\n\n  'use strict';\n\n  QUnit.module('JSHint - .');\n  QUnit.test('router.js should pass jshint', function(assert) { \n    assert.expect(1);\n    assert.ok(true, 'router.js should pass jshint.'); \n  });\n\n});","define('dummy/tests/test-helper', ['dummy/tests/helpers/resolver', 'ember-qunit'], function (resolver, ember_qunit) {\n\n\t'use strict';\n\n\tember_qunit.setResolver(resolver['default']);\n\n});","define('dummy/tests/test-helper.jshint', function () {\n\n  'use strict';\n\n  QUnit.module('JSHint - .');\n  QUnit.test('test-helper.js should pass jshint', function(assert) { \n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass jshint.'); \n  });\n\n});","/* jshint ignore:start */\n\n/* jshint ignore:end */\n","/* jshint ignore:start */\n\ndefine('dummy/config/environment', ['ember'], function(Ember) {\n  var prefix = 'dummy';\n/* jshint ignore:start */\n\ntry {\n  var metaName = prefix + '/config/environment';\n  var rawConfig = Ember['default'].$('meta[name=\"' + metaName + '\"]').attr('content');\n  var config = JSON.parse(unescape(rawConfig));\n\n  return { 'default': config };\n}\ncatch(err) {\n  throw new Error('Could not read config from meta tag with name \"' + metaName + '\".');\n}\n\n/* jshint ignore:end */\n\n});\n\nif (runningTests) {\n  require(\"dummy/tests/test-helper\");\n} else {\n  require(\"dummy/app\")[\"default\"].create({\"name\":\"ember-svg-charts\",\"version\":\"0.0.0+f77b9e69\"});\n}\n\n/* jshint ignore:end */\n"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjDA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnrnnnnnnnnnnIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;","file":"dummy.js"}